{"ast":null,"code":"import axios from \"axios\";\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = \"authenticatedUser\";\n\nclass AuthenticationService {\n  createBasicAuthToken(username, password) {\n    return \"Basic \" + window.btoa(username + \":\" + password);\n  }\n\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return \"\";\n    return user;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/monu/Downloads/lms-develop/lms/src/service/AuthenticationService.js"],"names":["axios","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","createBasicAuthToken","username","password","window","btoa","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","token","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AACP,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,oBAAoB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWC,MAAM,CAACC,IAAP,CAAYH,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AACDG,EAAAA,uBAAuB,CAACJ,QAAD,EAAWC,QAAX,EAAqB;AACxCI,IAAAA,cAAc,CAACC,OAAf,CAAuBT,gCAAvB,EAAyDG,QAAzD;AACA,SAAKO,sBAAL,CAA4B,KAAKR,oBAAL,CAA0BC,QAA1B,EAAoCC,QAApC,CAA5B;AACH;;AACDO,EAAAA,MAAM,GAAG;AACLH,IAAAA,cAAc,CAACI,UAAf,CAA0BZ,gCAA1B;AACH;;AACDa,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuBf,gCAAvB,CAAX;AACA,QAAIc,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AACDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuBf,gCAAvB,CAAX;AACA,QAAIc,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AACDJ,EAAAA,sBAAsB,CAACO,KAAD,EAAQ;AAC1BlB,IAAAA,KAAK,CAACmB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAY;AACvC,UAAI,KAAKR,cAAL,EAAJ,EAA2B;AACvBQ,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BN,KAA/B;AACH;;AACD,aAAOI,MAAP;AACH,KALD;AAMH;;AA5BuB;;AA8B5B,eAAe,IAAIpB,qBAAJ,EAAf","sourcesContent":["import axios from \"axios\";\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = \"authenticatedUser\";\r\nclass AuthenticationService {\r\n    createBasicAuthToken(username, password) {\r\n        return \"Basic \" + window.btoa(username + \":\" + password);\r\n    }\r\n    registerSuccessfulLogin(username, password) {\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\r\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\r\n    }\r\n    logout() {\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n    }\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n        if (user === null) return false;\r\n        return true;\r\n    }\r\n    getLoggedInUserName() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n        if (user === null) return \"\";\r\n        return user;\r\n    }\r\n    setupAxiosInterceptors(token) {\r\n        axios.interceptors.request.use((config) => {\r\n            if (this.isUserLoggedIn()) {\r\n                config.headers.authorization = token;\r\n            }\r\n            return config;\r\n        });\r\n    }\r\n}\r\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}